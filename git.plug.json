{
  "name": "git",
  "imports": [
    "https://get.silverbullet.md/global.plug.json"
  ],
  "requiredPermissions": [
    "shell"
  ],
  "functions": {
    "snapshotCommand": {
      "env": "client",
      "command": {
        "name": "Git: Snapshot"
      },
      "code": "(() => { var mod=(()=>{var i=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var l=Object.prototype.hasOwnProperty;var f=(o,t)=>{for(var r in t)i(o,r,{get:t[r],enumerable:!0})},p=(o,t,r,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let e of d(t))!l.call(o,e)&&e!==r&&i(o,e,{get:()=>t[e],enumerable:!(s=c(t,e))||s.enumerable});return o};var g=o=>p(i({},\"__esModule\",{value:!0}),o);var x={};f(x,{default:()=>P});var h=self.syscall;typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var n=self.syscall;function m(o,t=\"\"){return n(\"editor.prompt\",o,t)}function a(o,t,...r){return n(\"system.invokeFunction\",o,t,...r)}async function u(){let o=await m(\"Revision name:\");o||(o=\"Snapshot\"),console.log(\"Revision name\",o),await a(\"server\",\"commit\",o)}var P=u;return g(x);})();\n return mod;})()"
    },
    "syncCommand": {
      "env": "client",
      "command": {
        "name": "Git: Sync"
      },
      "code": "(() => { var mod=(()=>{var i=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var l=Object.prototype.hasOwnProperty;var f=(r,o)=>{for(var t in o)i(r,t,{get:o[t],enumerable:!0})},p=(r,o,t,m)=>{if(o&&typeof o==\"object\"||typeof o==\"function\")for(let e of d(o))!l.call(r,e)&&e!==t&&i(r,e,{get:()=>o[e],enumerable:!(m=c(o,e))||m.enumerable});return r};var g=r=>p(i({},\"__esModule\",{value:!0}),r);var x={};f(x,{default:()=>P});var h=self.syscall;typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var n=self.syscall;function s(r,o=\"info\"){return n(\"editor.flashNotification\",r,o)}function a(r,o,...t){return n(\"system.invokeFunction\",r,o,...t)}async function u(){await s(\"Syncing with git\"),await a(\"server\",\"sync\"),await s(\"Git sync complete!\")}var P=u;return g(x);})();\n return mod;})()"
    },
    "commit": {
      "env": "server",
      "code": "(() => { var mod=(()=>{var n=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var f=(o,t)=>{for(var e in t)n(o,e,{get:t[e],enumerable:!0})},p=(o,t,e,s)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of l(t))!d.call(o,r)&&r!==e&&n(o,r,{get:()=>t[r],enumerable:!(s=c(t,r))||s.enumerable});return o};var g=o=>p(n({},\"__esModule\",{value:!0}),o);var P={};f(P,{default:()=>h});var m=self.syscall;function i(o,t){return m(\"shell.run\",o,t)}typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var a=self.syscall;async function u(o){o||(o=\"Snapshot\"),console.log(\"Snapshotting the current space to git with commit message\",o),await i(\"git\",[\"add\",\"./*.md\"]);try{await i(\"git\",[\"commit\",\"-a\",\"-m\",o])}catch{}console.log(\"Done!\")}var h=u;return g(P);})();\n return mod;})()"
    },
    "sync": {
      "env": "server",
      "code": "(() => { var mod=(()=>{var i=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var f=(o,r)=>{for(var n in r)i(o,n,{get:r[n],enumerable:!0})},p=(o,r,n,s)=>{if(r&&typeof r==\"object\"||typeof r==\"function\")for(let t of l(r))!d.call(o,t)&&t!==n&&i(o,t,{get:()=>r[t],enumerable:!(s=c(r,t))||s.enumerable});return o};var g=o=>p(i({},\"__esModule\",{value:!0}),o);var x={};f(x,{default:()=>P});var m=self.syscall;function e(o,r){return m(\"shell.run\",o,r)}typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var a=self.syscall;async function h(o){o||(o=\"Snapshot\"),console.log(\"Snapshotting the current space to git with commit message\",o),await e(\"git\",[\"add\",\"./*.md\"]);try{await e(\"git\",[\"commit\",\"-a\",\"-m\",o])}catch{}console.log(\"Done!\")}async function u(){console.log(\"Going to sync with git\"),await h(),console.log(\"Then pulling from remote\"),await e(\"git\",[\"pull\"]),console.log(\"And then pushing to remote\"),await e(\"git\",[\"push\"]),console.log(\"Done!\")}var P=u;return g(x);})();\n return mod;})()"
    }
  },
  "assets": {}
}