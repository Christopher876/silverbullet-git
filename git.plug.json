{
  "name": "git",
  "imports": [
    "https://get.silverbullet.md/global.plug.json"
  ],
  "requiredPermissions": [
    "shell"
  ],
  "functions": {
    "snapshotCommand": {
      "env": "client",
      "command": {
        "name": "Git: Snapshot"
      },
      "code": "(() => { var mod=(()=>{var u=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var m=(t,e)=>{for(var o in e)u(t,o,{get:e[o],enumerable:!0})},P=(t,e,o,n)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of f(e))!x.call(t,s)&&s!==o&&u(t,s,{get:()=>e[s],enumerable:!(n=d(e,s))||n.enumerable});return t};var y=t=>P(u({},\"__esModule\",{value:!0}),t);var ae={};m(ae,{default:()=>se});var i=self.syscall;typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var r=self.syscall;var a={};m(a,{confirm:()=>H,dispatch:()=>Q,downloadFile:()=>O,filterBox:()=>q,flashNotification:()=>R,getCurrentPage:()=>M,getCursor:()=>D,getSelection:()=>k,getText:()=>C,getUiOption:()=>J,hidePanel:()=>I,insertAtCursor:()=>G,insertAtPos:()=>K,moveCursor:()=>B,navigate:()=>T,openUrl:()=>L,prompt:()=>z,reloadPage:()=>$,replaceRange:()=>V,save:()=>U,setPage:()=>S,setSelection:()=>E,setUiOption:()=>W,showPanel:()=>N,vimEx:()=>X});function M(){return r(\"editor.getCurrentPage\")}function S(t){return r(\"editor.setPage\",t)}function C(){return r(\"editor.getText\")}function D(){return r(\"editor.getCursor\")}function k(){return r(\"editor.getSelection\")}function E(t,e){return r(\"editor.setSelection\",t,e)}function U(){return r(\"editor.save\")}function T(t,e,o=!1,n=!1){return r(\"editor.navigate\",t,e,o,n)}function $(){return r(\"editor.reloadPage\")}function L(t){return r(\"editor.openUrl\",t)}function O(t,e){return r(\"editor.downloadFile\",t,e)}function R(t,e=\"info\"){return r(\"editor.flashNotification\",t,e)}function q(t,e,o=\"\",n=\"\"){return r(\"editor.filterBox\",t,e,o,n)}function N(t,e,o,n=\"\"){return r(\"editor.showPanel\",t,e,o,n)}function I(t){return r(\"editor.hidePanel\",t)}function K(t,e){return r(\"editor.insertAtPos\",t,e)}function V(t,e,o){return r(\"editor.replaceRange\",t,e,o)}function B(t,e=!1){return r(\"editor.moveCursor\",t,e)}function G(t){return r(\"editor.insertAtCursor\",t)}function Q(t){return r(\"editor.dispatch\",t)}function z(t,e=\"\"){return r(\"editor.prompt\",t,e)}function H(t){return r(\"editor.confirm\",t)}function J(t){return r(\"editor.getUiOption\",t)}function W(t,e){return r(\"editor.setUiOption\",t,e)}function X(t){return r(\"editor.vimEx\",t)}var c=class{listPages(e=!1){return r(\"space.listPages\",e)}getPageMeta(e){return r(\"space.getPageMeta\",e)}readPage(e){return r(\"space.readPage\",e)}writePage(e,o){return r(\"space.writePage\",e,o)}deletePage(e){return r(\"space.deletePage\",e)}listPlugs(){return r(\"space.listPlugs\")}listAttachments(){return r(\"space.listAttachments\")}getAttachmentMeta(e){return r(\"space.getAttachmentMeta\",e)}readAttachment(e){return r(\"space.readAttachment\",e)}writeAttachment(e,o,n){return r(\"space.writeAttachment\",e,o,n)}deleteAttachment(e){return r(\"space.deleteAttachment\",e)}readFile(e,o){return r(\"space.readFile\",e,o)}getFileMeta(e){return r(\"space.getFileMeta\",e)}writeFile(e,o,n){return r(\"space.writeFile\",e,o,n)}deleteFile(e){return r(\"space.deleteFile\",e)}listFiles(e){return r(\"space.listFiles\",e)}},j=new c;var l={};m(l,{getEnv:()=>ne,invokeCommand:()=>te,invokeFunction:()=>ee,listCommands:()=>re,reloadPlugs:()=>oe});function ee(t,e,...o){return r(\"system.invokeFunction\",t,e,...o)}function te(t){return r(\"system.invokeCommand\",t)}function re(){return r(\"system.listCommands\")}function oe(){r(\"system.reloadPlugs\")}function ne(){return r(\"system.getEnv\")}async function p(){let t=await a.prompt(\"Revision name:\");t||(t=\"Snapshot\"),console.log(\"Revision name\",t),await l.invokeFunction(\"server\",\"commit\",t)}var se=p;return y(ae);})();\n return mod;})()"
    },
    "syncCommand": {
      "env": "client",
      "command": {
        "name": "Git: Sync"
      },
      "code": "(() => { var mod=(()=>{var u=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var m=(r,e)=>{for(var o in e)u(r,o,{get:e[o],enumerable:!0})},P=(r,e,o,n)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of f(e))!x.call(r,s)&&s!==o&&u(r,s,{get:()=>e[s],enumerable:!(n=d(e,s))||n.enumerable});return r};var y=r=>P(u({},\"__esModule\",{value:!0}),r);var ae={};m(ae,{default:()=>se});var i=self.syscall;typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var t=self.syscall;var a={};m(a,{confirm:()=>H,dispatch:()=>Q,downloadFile:()=>O,filterBox:()=>q,flashNotification:()=>R,getCurrentPage:()=>M,getCursor:()=>D,getSelection:()=>k,getText:()=>C,getUiOption:()=>J,hidePanel:()=>I,insertAtCursor:()=>G,insertAtPos:()=>K,moveCursor:()=>B,navigate:()=>T,openUrl:()=>L,prompt:()=>z,reloadPage:()=>$,replaceRange:()=>V,save:()=>U,setPage:()=>S,setSelection:()=>E,setUiOption:()=>W,showPanel:()=>N,vimEx:()=>X});function M(){return t(\"editor.getCurrentPage\")}function S(r){return t(\"editor.setPage\",r)}function C(){return t(\"editor.getText\")}function D(){return t(\"editor.getCursor\")}function k(){return t(\"editor.getSelection\")}function E(r,e){return t(\"editor.setSelection\",r,e)}function U(){return t(\"editor.save\")}function T(r,e,o=!1,n=!1){return t(\"editor.navigate\",r,e,o,n)}function $(){return t(\"editor.reloadPage\")}function L(r){return t(\"editor.openUrl\",r)}function O(r,e){return t(\"editor.downloadFile\",r,e)}function R(r,e=\"info\"){return t(\"editor.flashNotification\",r,e)}function q(r,e,o=\"\",n=\"\"){return t(\"editor.filterBox\",r,e,o,n)}function N(r,e,o,n=\"\"){return t(\"editor.showPanel\",r,e,o,n)}function I(r){return t(\"editor.hidePanel\",r)}function K(r,e){return t(\"editor.insertAtPos\",r,e)}function V(r,e,o){return t(\"editor.replaceRange\",r,e,o)}function B(r,e=!1){return t(\"editor.moveCursor\",r,e)}function G(r){return t(\"editor.insertAtCursor\",r)}function Q(r){return t(\"editor.dispatch\",r)}function z(r,e=\"\"){return t(\"editor.prompt\",r,e)}function H(r){return t(\"editor.confirm\",r)}function J(r){return t(\"editor.getUiOption\",r)}function W(r,e){return t(\"editor.setUiOption\",r,e)}function X(r){return t(\"editor.vimEx\",r)}var c=class{listPages(e=!1){return t(\"space.listPages\",e)}getPageMeta(e){return t(\"space.getPageMeta\",e)}readPage(e){return t(\"space.readPage\",e)}writePage(e,o){return t(\"space.writePage\",e,o)}deletePage(e){return t(\"space.deletePage\",e)}listPlugs(){return t(\"space.listPlugs\")}listAttachments(){return t(\"space.listAttachments\")}getAttachmentMeta(e){return t(\"space.getAttachmentMeta\",e)}readAttachment(e){return t(\"space.readAttachment\",e)}writeAttachment(e,o,n){return t(\"space.writeAttachment\",e,o,n)}deleteAttachment(e){return t(\"space.deleteAttachment\",e)}readFile(e,o){return t(\"space.readFile\",e,o)}getFileMeta(e){return t(\"space.getFileMeta\",e)}writeFile(e,o,n){return t(\"space.writeFile\",e,o,n)}deleteFile(e){return t(\"space.deleteFile\",e)}listFiles(e){return t(\"space.listFiles\",e)}},j=new c;var l={};m(l,{getEnv:()=>ne,invokeCommand:()=>te,invokeFunction:()=>ee,listCommands:()=>re,reloadPlugs:()=>oe});function ee(r,e,...o){return t(\"system.invokeFunction\",r,e,...o)}function te(r){return t(\"system.invokeCommand\",r)}function re(){return t(\"system.listCommands\")}function oe(){t(\"system.reloadPlugs\")}function ne(){return t(\"system.getEnv\")}async function p(){await a.flashNotification(\"Syncing with git\"),await l.invokeFunction(\"server\",\"sync\"),await a.flashNotification(\"Git sync complete!\")}var se=p;return y(ae);})();\n return mod;})()"
    },
    "commit": {
      "env": "server",
      "code": "(() => { var mod=(()=>{var l=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var m=(r,e)=>{for(var o in e)l(r,o,{get:e[o],enumerable:!0})},P=(r,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of f(e))!x.call(r,s)&&s!==o&&l(r,s,{get:()=>e[s],enumerable:!(i=d(e,s))||i.enumerable});return r};var y=r=>P(l({},\"__esModule\",{value:!0}),r);var T={};m(T,{default:()=>U});var n=self.syscall;var a={};m(a,{run:()=>w});function w(r,e){return n(\"shell.run\",r,e)}typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var t=self.syscall;var u=class{listPages(e=!1){return t(\"space.listPages\",e)}getPageMeta(e){return t(\"space.getPageMeta\",e)}readPage(e){return t(\"space.readPage\",e)}writePage(e,o){return t(\"space.writePage\",e,o)}deletePage(e){return t(\"space.deletePage\",e)}listPlugs(){return t(\"space.listPlugs\")}listAttachments(){return t(\"space.listAttachments\")}getAttachmentMeta(e){return t(\"space.getAttachmentMeta\",e)}readAttachment(e){return t(\"space.readAttachment\",e)}writeAttachment(e,o,i){return t(\"space.writeAttachment\",e,o,i)}deleteAttachment(e){return t(\"space.deleteAttachment\",e)}readFile(e,o){return t(\"space.readFile\",e,o)}getFileMeta(e){return t(\"space.getFileMeta\",e)}writeFile(e,o,i){return t(\"space.writeFile\",e,o,i)}deleteFile(e){return t(\"space.deleteFile\",e)}listFiles(e){return t(\"space.listFiles\",e)}},k=new u;async function p(r){r||(r=\"Snapshot\"),console.log(\"Snapshotting the current space to git with commit message\",r);let{code:e}=await a.run(\"git\",[\"add\",\"./*.md\"]);console.log(\"Git add code\",e);try{await a.run(\"git\",[\"commit\",\"-a\",\"-m\",r])}catch{}console.log(\"Done!\")}var U=p;return y(T);})();\n return mod;})()"
    },
    "sync": {
      "env": "server",
      "code": "(() => { var mod=(()=>{var l=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var m=(r,e)=>{for(var o in e)l(r,o,{get:e[o],enumerable:!0})},P=(r,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of f(e))!x.call(r,a)&&a!==o&&l(r,a,{get:()=>e[a],enumerable:!(s=d(e,a))||s.enumerable});return r};var y=r=>P(l({},\"__esModule\",{value:!0}),r);var $={};m($,{default:()=>T});var n=self.syscall;var i={};m(i,{run:()=>w});function w(r,e){return n(\"shell.run\",r,e)}typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var t=self.syscall;var u=class{listPages(e=!1){return t(\"space.listPages\",e)}getPageMeta(e){return t(\"space.getPageMeta\",e)}readPage(e){return t(\"space.readPage\",e)}writePage(e,o){return t(\"space.writePage\",e,o)}deletePage(e){return t(\"space.deletePage\",e)}listPlugs(){return t(\"space.listPlugs\")}listAttachments(){return t(\"space.listAttachments\")}getAttachmentMeta(e){return t(\"space.getAttachmentMeta\",e)}readAttachment(e){return t(\"space.readAttachment\",e)}writeAttachment(e,o,s){return t(\"space.writeAttachment\",e,o,s)}deleteAttachment(e){return t(\"space.deleteAttachment\",e)}readFile(e,o){return t(\"space.readFile\",e,o)}getFileMeta(e){return t(\"space.getFileMeta\",e)}writeFile(e,o,s){return t(\"space.writeFile\",e,o,s)}deleteFile(e){return t(\"space.deleteFile\",e)}listFiles(e){return t(\"space.listFiles\",e)}},k=new u;async function U(r){r||(r=\"Snapshot\"),console.log(\"Snapshotting the current space to git with commit message\",r);let{code:e}=await i.run(\"git\",[\"add\",\"./*.md\"]);console.log(\"Git add code\",e);try{await i.run(\"git\",[\"commit\",\"-a\",\"-m\",r])}catch{}console.log(\"Done!\")}async function p(){console.log(\"Going to sync with git\"),await U(),console.log(\"Then pulling from remote\"),await i.run(\"git\",[\"pull\"]),console.log(\"And then pushing to remote\"),await i.run(\"git\",[\"push\"]),console.log(\"Done!\")}var T=p;return y($);})();\n return mod;})()"
    }
  },
  "assets": {}
}