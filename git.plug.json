{
  "name": "git",
  "imports": [
    "https://get.silverbullet.md/global.plug.json"
  ],
  "requiredPermissions": [
    "shell"
  ],
  "functions": {
    "snapshotCommand": {
      "env": "client",
      "command": {
        "name": "Git: Snapshot"
      },
      "code": "(() => { var mod=(()=>{var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var g=(e,t)=>{for(var r in t)s(e,r,{get:t[r],enumerable:!0})},x=(e,t,r,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of p(t))!d.call(e,n)&&n!==r&&s(e,n,{get:()=>t[n],enumerable:!(a=f(t,n))||a.enumerable});return e};var y=e=>x(s({},\"__esModule\",{value:!0}),e);var A={};g(A,{default:()=>C});var o=self.syscall;typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var i=self.syscall;function u(e,t=\"\"){return i(\"editor.prompt\",e,t)}function m(e,t,...r){return i(\"system.invokeFunction\",e,t,...r)}async function c(){let e=await u(\"Revision name:\");e||(e=\"Snapshot\"),console.log(\"Revision name\",e),await m(\"server\",\"commit\",e)}var C=c;return y(A);})();\n return mod;})()"
    },
    "syncCommand": {
      "env": "client",
      "command": {
        "name": "Git: Sync"
      },
      "code": "(() => { var mod=(()=>{var s=Object.defineProperty;var f=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var g=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},x=(t,e,r,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of p(e))!d.call(t,n)&&n!==r&&s(t,n,{get:()=>e[n],enumerable:!(l=f(e,n))||l.enumerable});return t};var y=t=>x(s({},\"__esModule\",{value:!0}),t);var A={};g(A,{default:()=>C});var o=self.syscall;typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var i=self.syscall;function a(t,e=\"info\"){return i(\"editor.flashNotification\",t,e)}function m(t,e,...r){return i(\"system.invokeFunction\",t,e,...r)}async function c(){await a(\"Syncing with git\"),await m(\"server\",\"sync\"),await a(\"Git sync complete!\")}var C=c;return y(A);})();\n return mod;})()"
    },
    "commit": {
      "env": "server",
      "code": "(() => { var mod=(()=>{var s=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var l=(e,t)=>{for(var i in t)s(e,i,{get:t[i],enumerable:!0})},d=(e,t,i,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let o of f(t))!p.call(e,o)&&o!==i&&s(e,o,{get:()=>t[o],enumerable:!(a=c(t,o))||a.enumerable});return e};var g=e=>d(s({},\"__esModule\",{value:!0}),e);var C={};l(C,{default:()=>F});var r=self.syscall;var n={};l(n,{run:()=>b});function b(e,t){return r(\"shell.run\",e,t)}typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var u=self.syscall;async function m(e){e||(e=\"Snapshot\"),console.log(\"Snapshotting the current space to git with commit message\",e),await n.run(\"git\",[\"add\",\"./*.md\"]);try{await n.run(\"git\",[\"commit\",\"-a\",\"-m\",e])}catch{}console.log(\"Done!\")}var F=m;return g(C);})();\n return mod;})()"
    },
    "sync": {
      "env": "server",
      "code": "(() => { var mod=(()=>{var s=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var p=Object.prototype.hasOwnProperty;var l=(e,t)=>{for(var i in t)s(e,i,{get:t[i],enumerable:!0})},d=(e,t,i,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let n of f(t))!p.call(e,n)&&n!==i&&s(e,n,{get:()=>t[n],enumerable:!(a=c(t,n))||a.enumerable});return e};var g=e=>d(s({},\"__esModule\",{value:!0}),e);var A={};l(A,{default:()=>C});var r=self.syscall;var o={};l(o,{run:()=>b});function b(e,t){return r(\"shell.run\",e,t)}typeof self>\"u\"&&(self={syscall:()=>{throw new Error(\"Not implemented here\")}});var u=self.syscall;async function F(e){e||(e=\"Snapshot\"),console.log(\"Snapshotting the current space to git with commit message\",e),await o.run(\"git\",[\"add\",\"./*.md\"]);try{await o.run(\"git\",[\"commit\",\"-a\",\"-m\",e])}catch{}console.log(\"Done!\")}async function m(){console.log(\"Going to sync with git\"),await F(),console.log(\"Then pulling from remote\"),await o.run(\"git\",[\"pull\"]),console.log(\"And then pushing to remote\"),await o.run(\"git\",[\"push\"]),console.log(\"Done!\")}var C=m;return g(A);})();\n return mod;})()"
    }
  },
  "assets": {}
}